// stylelint-disable at-rule-empty-line-before
$spacer: 5px !default;

@function get-prop-name($prop) {
  @if (index((m, mx, my, mt, mb, ml, mr), $prop)) {
    @return margin;
  } @else if (index((p, px, py, pt, pb, pl, pr), $prop)) {
    @return padding;
  } @else {
    @return null;
  }
}

@function get-prop-postfix-group($prop) {
  $postfix-group: ();

  @if (index((pl, ml, mx, px), $prop)) {
    $postfix-group: append($postfix-group, -left);
  }

  @if (index((pr, mr, mx, px), $prop)) {
    $postfix-group: append($postfix-group, -right);
  }

  @if (index((pt, mt, my, py), $prop)) {
    $postfix-group: append($postfix-group, -top);
  }

  @if (index((pb, mb, my, py), $prop)) {
    $postfix-group: append($postfix-group, -bottom);
  }

  @return $postfix-group;
}

@function get-prop-value($prop, $size) {
  @if $size == auto {
    @return auto;
  }

  @if $size == half {
    $size: 0.25;
  } @else if $size == full {
    $size: 1;
  } @else if type-of($size) != "number" {
    @error "#{$size} is not a valid size";
  }

  @return $size * $spacer;
}

@mixin _make-spacer($prop, $size) {
  $prop-name: get-prop-name($prop);
  $prop-value: get-prop-value($prop, $size);
  $prop-postfixes: get-prop-postfix-group($prop);

  @if (length($prop-postfixes) > 0) {
    @each $postfix in $prop-postfixes {
      #{$prop-name}#{$postfix}: rem($prop-value);
    }
  } @else {
    #{$prop-name}: rem($prop-value);
  }
}

@mixin make-spacer($prop, $size) {
  @include _make-spacer($prop, $size);
}